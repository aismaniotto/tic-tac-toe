{"version":3,"sources":["store/types.ts","components/Row.tsx","components/Tile.tsx","store/actions.ts","components/Board.tsx","components/ScoreBoard.tsx","components/Game.tsx","serviceWorker.ts","store/reducer.ts","store/index.ts","index.tsx"],"names":["GameTypes","Player","Tile","Status","Row","props","className","children","playerTile","None","onClick","cleanGame","action","CLEAN_GAME","resetGame","RESET_GAME","playIn","tile","PLAY_IN","checkStatus","CHECK_STATUS","nextTurn","NEXT_TURN","connect","state","dispatch","bindActionCreators","GameAction","status","tile0x0","tile0x1","tile0x2","tile1x0","tile1x1","tile1x2","tile2x0","tile2x1","tile2x2","useEffect","ItsATie","swal","then","PlayerOWin","PlayerXWin","Tile0x0","Tile0x1","Tile0x2","Tile1x0","Tile1x1","Tile1x2","Tile2x0","Tile2x1","Tile2x2","ScoreBoard","scorePlayerO","scorePlayerX","resetScore","scoreX","scoreO","document","title","Boolean","window","location","hostname","match","INITIAL_STATE","InProgress","currentPlayer","X","checkCurrentStatus","gameState","gameTiles","O","tilesFromCurrentPlayer","filter","x","length","reducer","type","payload","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","loading","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5904371b.chunk.js","sourcesContent":["/**\n * actions types\n */\nexport enum GameTypes {\n  RESET_GAME = \"@game/RESET_GAME\",\n  CLEAN_GAME = \"@game/CLEAN_GAME\",\n  PLAY_IN = \"@game/PLAY_IN\",\n  CHECK_STATUS = \"@game/CHECK_STATUS\",\n  NEXT_TURN = \"@game/NEXT_TURN\",\n}\n\n/**\n * data types\n */\nexport enum Player {\n  X = \"X\",\n  O = \"O\",\n  None = \"\",\n}\n\nexport enum Tile {\n  Tile0x0 = 2,\n  Tile0x1 = 7,\n  Tile0x2 = 6,\n  Tile1x0 = 9,\n  Tile1x1 = 5,\n  Tile1x2 = 1,\n  Tile2x0 = 4,\n  Tile2x1 = 3,\n  Tile2x2 = 8,\n}\n\nexport enum Status {\n  PlayerOWin,\n  PlayerXWin,\n  ItsATie,\n  InProgress,\n}\n\n/**\n * state type\n */\nexport interface GameState {\n  readonly scoreX: number;\n  readonly scoreO: number;\n  readonly status: Status;\n  readonly currentPlayer: Player;\n  readonly tile0x0: Player;\n  readonly tile0x1: Player;\n  readonly tile0x2: Player;\n  readonly tile1x0: Player;\n  readonly tile1x1: Player;\n  readonly tile1x2: Player;\n  readonly tile2x0: Player;\n  readonly tile2x1: Player;\n  readonly tile2x2: Player;\n}\n","import React from \"react\";\nimport \"../styles/Row.css\";\n\ninterface Props {\n  children?: any;\n}\n\nconst Row: React.FC<Props> = (props: Props) => {\n  return <div className=\"row\">{props.children}</div>;\n};\n\nexport default Row;\n","import React from \"react\";\nimport \"../styles/Tile.css\";\nimport { Player } from \"../store/types\";\n\ninterface Props {\n  onClick?: () => void;\n  playerTile?: Player;\n  className?: string;\n}\n\nconst Tile: React.FC<Props> = (props: Props) => {\n  const { className, playerTile = Player.None, onClick = () => null } = props;\n\n  return (\n    <div className={`tile ${className}`} onClick={() => onClick()}>\n      {playerTile}\n    </div>\n  );\n};\n\nexport default Tile;\n","import { action } from \"typesafe-actions\";\nimport { GameTypes, Tile } from \"./types\";\n\nexport const cleanGame = () => action(GameTypes.CLEAN_GAME);\nexport const resetGame = () => action(GameTypes.RESET_GAME);\n\nexport const playIn = (tile: Tile) => action(GameTypes.PLAY_IN, tile);\n\nexport const checkStatus = () => action(GameTypes.CHECK_STATUS);\nexport const nextTurn = () => action(GameTypes.NEXT_TURN);\n","import React, { useEffect } from \"react\";\nimport \"../styles/Board.css\";\nimport Row from \"./Row\";\nimport TileComponent from \"./Tile\";\nimport { Tile, Status, GameState } from \"../store/types\";\nimport swal from \"sweetalert\";\nimport { connect } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport * as GameAction from \"../store/actions\";\n\ninterface DispatchProps {\n  playIn(tile: Tile): void;\n  cleanGame(): void;\n  checkStatus(): void;\n  nextTurn(): void;\n}\n\ntype Props = GameState & DispatchProps;\n\nconst Board: React.FC<Props> = (props: Props) => {\n  const {\n    playIn,\n    cleanGame,\n    checkStatus,\n    nextTurn,\n    status,\n    tile0x0,\n    tile0x1,\n    tile0x2,\n    tile1x0,\n    tile1x1,\n    tile1x2,\n    tile2x0,\n    tile2x1,\n    tile2x2,\n  } = props;\n\n  useEffect(() => {\n    checkStatus();\n    nextTurn();\n  }, [\n    tile0x0,\n    tile0x1,\n    tile0x2,\n    tile1x0,\n    tile1x1,\n    tile1x2,\n    tile2x0,\n    tile2x1,\n    tile2x2,\n    checkStatus,\n    nextTurn,\n  ]);\n\n  useEffect(() => {\n    if (status === Status.ItsATie) {\n      swal(\"It's a tie!\").then(() => cleanGame());\n    } else if (status === Status.PlayerOWin) {\n      swal(\"Player O is the winner!\").then(() => cleanGame());\n    } else if (status === Status.PlayerXWin) {\n      swal(\"Player X is the winner!\").then(() => cleanGame());\n    }\n  }, [status, cleanGame]);\n\n  return (\n    <div className=\"board\">\n      <Row>\n        <TileComponent\n          onClick={() => playIn(Tile.Tile0x0)}\n          playerTile={tile0x0}\n          className=\"board__tile--top-left\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile0x1)}\n          playerTile={tile0x1}\n          className=\"board__tile--top\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile0x2)}\n          playerTile={tile0x2}\n          className=\"board__tile--top-right\"\n        />\n      </Row>\n      <Row>\n        <TileComponent\n          onClick={() => playIn(Tile.Tile1x0)}\n          playerTile={tile1x0}\n          className=\"board__tile--left\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile1x1)}\n          playerTile={tile1x1}\n          className=\"board__tile\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile1x2)}\n          playerTile={tile1x2}\n          className=\"board__tile--right\"\n        />\n      </Row>\n      <Row>\n        <TileComponent\n          onClick={() => playIn(Tile.Tile2x0)}\n          playerTile={tile2x0}\n          className=\"board__tile--bottom-left\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile2x1)}\n          playerTile={tile2x1}\n          className=\"board__tile--bottom\"\n        />\n        <TileComponent\n          onClick={() => playIn(Tile.Tile2x2)}\n          playerTile={tile2x2}\n          className=\"board__tile--bottom-right\"\n        />\n      </Row>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: GameState) {\n  return state;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(GameAction, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React from \"react\";\nimport \"../styles/ScoreBoard.css\";\n\ninterface Props {\n  scorePlayerX: number;\n  scorePlayerO: number;\n  resetScore: () => void;\n}\n\nconst ScoreBoard: React.FC<Props> = (props: Props) => {\n  const { scorePlayerO, scorePlayerX, resetScore } = props;\n\n  return (\n    <div className=\"scoreBoard\">\n      <button className=\"scoreBoard--button\" onClick={resetScore}>\n        Reset\n      </button>\n      <h1>Player X: {scorePlayerX}</h1>\n      <h1>Player O: {scorePlayerO}</h1>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from \"react\";\nimport \"../styles/Game.css\";\nimport Board from \"./Board\";\nimport { GameState } from \"../store/types\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as GameAction from \"../store/actions\";\nimport ScoreBoard from \"./ScoreBoard\";\n\ninterface DispatchProps {\n  resetGame(): void;\n}\n\ntype Props = GameState & DispatchProps;\n\nconst Game: React.FC<Props> = (props: Props) => {\n  const { scoreX, scoreO, resetGame } = props;\n\n  document.title = \"Jogo da Velha\";\n  return (\n    <div className=\"game\">\n      <ScoreBoard\n        scorePlayerX={scoreX}\n        scorePlayerO={scoreO}\n        resetScore={resetGame}\n      />\n      <Board />\n    </div>\n  );\n};\n\nfunction mapStateToProps(state: GameState) {\n  return state;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(GameAction, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Reducer } from \"redux\";\nimport { GameState, GameTypes, Status, Player, Tile } from \"./types\";\n\nconst INITIAL_STATE: GameState = {\n  scoreX: 0,\n  scoreO: 0,\n  status: Status.InProgress,\n  currentPlayer: Player.X,\n  tile0x0: Player.None,\n  tile0x1: Player.None,\n  tile0x2: Player.None,\n  tile1x0: Player.None,\n  tile1x1: Player.None,\n  tile1x2: Player.None,\n  tile2x0: Player.None,\n  tile2x1: Player.None,\n  tile2x2: Player.None,\n};\n\nconst checkCurrentStatus = (gameState: GameState) => {\n  const {\n    currentPlayer,\n    tile0x0,\n    tile0x1,\n    tile0x2,\n    tile1x0,\n    tile1x1,\n    tile1x2,\n    tile2x0,\n    tile2x1,\n    tile2x2,\n  } = gameState;\n  const gameTiles: Array<number> = [\n    tile0x0 === Player.O ? -1 : tile0x0 === Player.X ? 1 : 0,\n    tile0x1 === Player.O ? -1 : tile0x1 === Player.X ? 1 : 0,\n    tile0x2 === Player.O ? -1 : tile0x2 === Player.X ? 1 : 0,\n    tile1x0 === Player.O ? -1 : tile1x0 === Player.X ? 1 : 0,\n    tile1x1 === Player.O ? -1 : tile1x1 === Player.X ? 1 : 0,\n    tile1x2 === Player.O ? -1 : tile1x2 === Player.X ? 1 : 0,\n    tile2x0 === Player.O ? -1 : tile2x0 === Player.X ? 1 : 0,\n    tile2x1 === Player.O ? -1 : tile2x1 === Player.X ? 1 : 0,\n    tile2x2 === Player.O ? -1 : tile2x2 === Player.X ? 1 : 0,\n  ];\n\n  const tilesFromCurrentPlayer: Array<number> = [\n    tile0x0 === currentPlayer ? Tile.Tile0x0 : 0,\n    tile0x1 === currentPlayer ? Tile.Tile0x1 : 0,\n    tile0x2 === currentPlayer ? Tile.Tile0x2 : 0,\n    tile1x0 === currentPlayer ? Tile.Tile1x0 : 0,\n    tile1x1 === currentPlayer ? Tile.Tile1x1 : 0,\n    tile1x2 === currentPlayer ? Tile.Tile1x2 : 0,\n    tile2x0 === currentPlayer ? Tile.Tile2x0 : 0,\n    tile2x1 === currentPlayer ? Tile.Tile2x1 : 0,\n    tile2x2 === currentPlayer ? Tile.Tile2x2 : 0,\n  ];\n\n  if (\n    tilesFromCurrentPlayer[0] +\n      tilesFromCurrentPlayer[1] +\n      tilesFromCurrentPlayer[2] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[3] +\n      tilesFromCurrentPlayer[4] +\n      tilesFromCurrentPlayer[5] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[6] +\n      tilesFromCurrentPlayer[7] +\n      tilesFromCurrentPlayer[8] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[0] +\n      tilesFromCurrentPlayer[3] +\n      tilesFromCurrentPlayer[6] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[1] +\n      tilesFromCurrentPlayer[4] +\n      tilesFromCurrentPlayer[7] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[2] +\n      tilesFromCurrentPlayer[5] +\n      tilesFromCurrentPlayer[8] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[0] +\n      tilesFromCurrentPlayer[4] +\n      tilesFromCurrentPlayer[8] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  } else if (\n    tilesFromCurrentPlayer[2] +\n      tilesFromCurrentPlayer[4] +\n      tilesFromCurrentPlayer[6] ===\n    15\n  ) {\n    return currentPlayer === Player.O ? Status.PlayerOWin : Status.PlayerXWin;\n  }\n\n  if (gameTiles.filter((x) => x === 0).length === 0) return Status.ItsATie;\n\n  return Status.InProgress;\n};\n\nconst reducer: Reducer<GameState> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GameTypes.RESET_GAME:\n      return INITIAL_STATE;\n\n    case GameTypes.CLEAN_GAME:\n      return {\n        ...state,\n        tile0x0: Player.None,\n        tile0x1: Player.None,\n        tile0x2: Player.None,\n        tile1x0: Player.None,\n        tile1x1: Player.None,\n        tile1x2: Player.None,\n        tile2x0: Player.None,\n        tile2x1: Player.None,\n        tile2x2: Player.None,\n      };\n\n    case GameTypes.PLAY_IN:\n      switch (action.payload) {\n        case Tile.Tile0x0:\n          if (state.tile0x0 === Player.None) {\n            return { ...state, tile0x0: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile0x1:\n          if (state.tile0x1 === Player.None) {\n            return { ...state, tile0x1: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile0x2:\n          if (state.tile0x2 === Player.None) {\n            return { ...state, tile0x2: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile1x0:\n          if (state.tile1x0 === Player.None) {\n            return { ...state, tile1x0: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile1x1:\n          if (state.tile1x1 === Player.None) {\n            return { ...state, tile1x1: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile1x2:\n          if (state.tile1x2 === Player.None) {\n            return { ...state, tile1x2: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile2x0:\n          if (state.tile2x0 === Player.None) {\n            return { ...state, tile2x0: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile2x1:\n          if (state.tile2x1 === Player.None) {\n            return { ...state, tile2x1: state.currentPlayer };\n          } else {\n            return state;\n          }\n        case Tile.Tile2x2:\n          if (state.tile2x2 === Player.None) {\n            return { ...state, tile2x2: state.currentPlayer };\n          } else {\n            return state;\n          }\n        default:\n          return state;\n      }\n\n    case GameTypes.CHECK_STATUS:\n      const status = checkCurrentStatus(state);\n      return {\n        ...state,\n        status: status,\n        scoreX: status === Status.PlayerXWin ? state.scoreX + 1 : state.scoreX,\n        scoreO: status === Status.PlayerOWin ? state.scoreO + 1 : state.scoreO,\n      };\n\n    case GameTypes.NEXT_TURN:\n      return {\n        ...state,\n        currentPlayer: state.currentPlayer === Player.X ? Player.O : Player.X,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, Store } from \"redux\";\nimport { GameState } from \"./types\";\nimport reducer from \"./reducer\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store: Store<GameState> = createStore(persistedReducer);\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Game />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}